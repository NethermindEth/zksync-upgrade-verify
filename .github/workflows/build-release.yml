name: Create Release with Compiled Binaries

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Rust
      uses: actions/setup-rust@v1
      
    - name: Install cross
      run: cargo install cross
      
    - name: Build for Linux x86_64
      run: cargo build --release --target=x86_64-unknown-linux-gnu
      
    - name: Create tar.gz for Linux x86_64
      run: tar -czvf linux_x86_64.tar.gz -C ./target/x86_64-unknown-linux-gnu/release/ .
      if: runner.os == 'Linux'

    - name: Build for Windows x86_64
      run: cargo build --release --target=aarch64-unknown-linux-gnu
      
    - name: Create zip for Windows x86_64
      run: zip -r windows_x86_64.zip ./target/x86_64-pc-windows-gnu/release/
      if: runner.os == 'Linux'

    - name: Build for Darwin x86_64
      run: cargo build --release --target x86_64-apple-darwin
      
    - name: Create tar.gz for Darwin x86_64
      run: tar -czvf darwin_x86_64.tar.gz -C ./target/x86_64-apple-darwin/release/ .
      if: runner.os == 'Linux'

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      id: upload-release-assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: |
          ./linux_x86_64.tar.gz
          ./windows_x86_64.zip
          ./darwin_x86_64.tar.gz
        asset_name: |
          linux_x86_64.tar.gz
          windows_x86_64.zip
          darwin_x86_64.tar.gz
        asset_content_type: application/gzip
